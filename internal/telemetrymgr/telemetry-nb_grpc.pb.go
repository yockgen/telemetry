// Generate gRPC stubs with protoc
// protoc --proto_path=<path> --go_out=<internal directory> --go-grpc_out=<internal directory> telemetry-nb.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: telemetry-nb.proto

package telemetrymgr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TelemetryServiceExternal_GetGroups_FullMethodName = "/TelemetryServiceExternal/GetGroups"
	TelemetryServiceExternal_GetGroup_FullMethodName  = "/TelemetryServiceExternal/GetGroup"
)

// TelemetryServiceExternalClient is the client API for TelemetryServiceExternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryServiceExternalClient interface {
	GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
}

type telemetryServiceExternalClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryServiceExternalClient(cc grpc.ClientConnInterface) TelemetryServiceExternalClient {
	return &telemetryServiceExternalClient{cc}
}

func (c *telemetryServiceExternalClient) GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error) {
	out := new(GetGroupsResponse)
	err := c.cc.Invoke(ctx, TelemetryServiceExternal_GetGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceExternalClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, TelemetryServiceExternal_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryServiceExternalServer is the server API for TelemetryServiceExternal service.
// All implementations must embed UnimplementedTelemetryServiceExternalServer
// for forward compatibility
type TelemetryServiceExternalServer interface {
	GetGroups(context.Context, *GetGroupsRequest) (*GetGroupsResponse, error)
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	mustEmbedUnimplementedTelemetryServiceExternalServer()
}

// UnimplementedTelemetryServiceExternalServer must be embedded to have forward compatible implementations.
type UnimplementedTelemetryServiceExternalServer struct {
}

func (UnimplementedTelemetryServiceExternalServer) GetGroups(context.Context, *GetGroupsRequest) (*GetGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedTelemetryServiceExternalServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedTelemetryServiceExternalServer) mustEmbedUnimplementedTelemetryServiceExternalServer() {
}

// UnsafeTelemetryServiceExternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryServiceExternalServer will
// result in compilation errors.
type UnsafeTelemetryServiceExternalServer interface {
	mustEmbedUnimplementedTelemetryServiceExternalServer()
}

func RegisterTelemetryServiceExternalServer(s grpc.ServiceRegistrar, srv TelemetryServiceExternalServer) {
	s.RegisterService(&TelemetryServiceExternal_ServiceDesc, srv)
}

func _TelemetryServiceExternal_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceExternalServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryServiceExternal_GetGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceExternalServer).GetGroups(ctx, req.(*GetGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryServiceExternal_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceExternalServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryServiceExternal_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceExternalServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelemetryServiceExternal_ServiceDesc is the grpc.ServiceDesc for TelemetryServiceExternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemetryServiceExternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TelemetryServiceExternal",
	HandlerType: (*TelemetryServiceExternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroups",
			Handler:    _TelemetryServiceExternal_GetGroups_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _TelemetryServiceExternal_GetGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "telemetry-nb.proto",
}
