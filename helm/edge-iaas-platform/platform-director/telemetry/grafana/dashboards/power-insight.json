{
  "__inputs": [
    {
      "name": "DS_INTEL_INFLUX",
      "label": "Intel_Influx",
      "description": "",
      "type": "datasource",
      "pluginId": "influxdb",
      "pluginName": "InfluxDB"
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "panel",
      "id": "gauge",
      "name": "Gauge",
      "version": ""
    },
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "9.3.6"
    },
    {
      "type": "datasource",
      "id": "influxdb",
      "name": "InfluxDB",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "stat",
      "name": "Stat",
      "version": ""
    },
    {
      "type": "panel",
      "id": "timeseries",
      "name": "Time series",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "influxdb",
          "uid": "P8EFB3B3375746E67"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "collapsed": false,
      "datasource": {
        "uid": "prometheus"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 37,
      "panels": [],
      "targets": [
        {
          "datasource": {
            "uid": "prometheus"
          },
          "refId": "A"
        }
      ],
      "title": "Cluster nodes CPU overview",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "index": 0,
                  "text": "0"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 5,
        "x": 0,
        "y": 1
      },
      "id": 14,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "hide": false,
          "query": "from(bucket:\"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n  |> group(columns: [\"host\"])\r\n  |> distinct(column: \"host\")\r\n  |> count()\r\n  |> group()\r\n  |> sum()",
          "refId": "A"
        }
      ],
      "title": "Total nodes",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "Null": {
                  "index": 0,
                  "text": "0"
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 5,
        "y": 1
      },
      "id": 77,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "hide": false,
          "query": "from(bucket:\"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n  |> group(columns: [\"host\"])\r\n  |> distinct(column: \"cpu\")\r\n  |> count()\r\n  |> group()\r\n  |> sum()",
          "refId": "A"
        }
      ],
      "title": "Total cores",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "description": "Cores that had utilization:\n- average < 2%\n- peak < 5%",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "index": 0,
                  "text": "0"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 9,
        "y": 1
      },
      "id": 18,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "t1 =\r\n    from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> mean()\r\n          |> filter(fn: (r) => r[\"_value\"] > 98.00)\r\n\r\nt2 =\r\n     from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> min()\r\n          |> filter(fn: (r) => r[\"_value\"] > 95.00)\r\n        \r\n\r\nunion(tables: [t1, t2])\r\n|> distinct(column: \"cpu\")\r\n|> group()\r\n|> count()",
          "refId": "A"
        }
      ],
      "title": "Cores without any workload (Idle)",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "description": "Not classified as Idle nor Busy",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "index": 0,
                  "text": "0"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 3,
        "x": 13,
        "y": 1
      },
      "id": 20,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "hide": false,
          "query": "t1 =\r\n    from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])          \r\n          |> mean()\r\n          |> filter(fn: (r) => r[\"_value\"] <= 1)\r\n\r\nt2 =\r\n     from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])          \r\n          |> min()\r\n          |> filter(fn: (r) => r[\"_value\"] == 0.00)\r\n        \r\n\r\nbusy = union(tables: [t1, t2])\r\n|> distinct(column: \"cpu\")\r\n|> group()\r\n|> count()\r\n\r\nt3 =\r\n    from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> mean()\r\n          |> filter(fn: (r) => r[\"_value\"] > 98.00)\r\n\r\nt4 =\r\n     from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> min()\r\n          |> filter(fn: (r) => r[\"_value\"] > 95.00)\r\n        \r\n\r\nidle = union(tables: [t3, t4])\r\n|> distinct(column: \"cpu\")\r\n|> group()\r\n|> count()\r\n\r\ntotal = from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n  |> group(columns: [\"host\",\"cpu\"])    \r\n  |> distinct(column: \"cpu\")\r\n  |> group()\r\n  |> count()\r\n\r\nused = union(tables: [busy, idle])\r\n     |> sum()\r\n     |> map(fn: (r) => ({r with _value: r._value * -1}))\r\n\r\nunion(tables: [used, total])\r\n|>sum()\r\n",
          "refId": "B"
        }
      ],
      "title": "Cores with workload (Running)",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "description": "Cores that had utilization:\n- average >= 99.00%\n- peak >= 99.99%",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "index": 0,
                  "text": "0"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 3,
        "x": 16,
        "y": 1
      },
      "id": 16,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "hide": false,
          "query": "t1 =\r\n    from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])          \r\n          |> mean()\r\n          |> filter(fn: (r) => r[\"_value\"] <= 1)\r\n\r\nt2 =\r\n     from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])          \r\n          |> min()\r\n          |> filter(fn: (r) => r[\"_value\"] == 0.00)\r\n        \r\n\r\nunion(tables: [t1, t2])\r\n|> distinct(column: \"cpu\")\r\n|> group()\r\n|> count()",
          "refId": "A"
        }
      ],
      "title": "Cores with heavy workload (Busy)",
      "type": "stat"
    },
    {
      "collapsed": false,
      "datasource": {
        "uid": "prometheus"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 5
      },
      "id": 10,
      "panels": [],
      "targets": [
        {
          "datasource": {
            "uid": "prometheus"
          },
          "refId": "A"
        }
      ],
      "title": "Cluster nodes power breakdown",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "C"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "DRAM Watt"
              },
              {
                "id": "unit",
                "value": "watt"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "D"
            },
            "properties": [
              {
                "id": "unit",
                "value": "watt"
              },
              {
                "id": "displayName",
                "value": "Busy CPUs Watt"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "F"
            },
            "properties": [
              {
                "id": "unit",
                "value": "watt"
              },
              {
                "id": "displayName",
                "value": "Idle CPUs Watt"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "E"
            },
            "properties": [
              {
                "id": "unit",
                "value": "watt"
              },
              {
                "id": "displayName",
                "value": "Other States CPUs Watt"
              }
            ]
          },
          {
            "__systemRef": "hideSeriesFrom",
            "matcher": {
              "id": "byNames",
              "options": {
                "mode": "exclude",
                "names": [
                  "Value"
                ],
                "prefix": "All except:",
                "readOnly": true
              }
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 19,
        "x": 0,
        "y": 6
      },
      "id": 4,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "hide": false,
          "query": "import \"strings\"\r\n\r\nt1 =\r\n    from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])          \r\n          |> aggregateWindow(every: ${timeinterval}, fn: mean)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value <= 1 then r.host else \"null\",\r\n           cpu: if r._value <= 1 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n\r\nt2 =\r\n     from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])          \r\n          |> aggregateWindow(every: ${timeinterval}, fn: min)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value == 0.00 then r.host else \"null\",\r\n           cpu: if r._value == 0.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n        \r\n\r\nbusyhost = union(tables: [t1, t2])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"host\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nbusycpu = union(tables: [t1, t2])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"cpu\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\n busyhostwithpckid = from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_core_cpu_frequency_mhz\")\r\n  |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n   |> map(\r\n        fn: (r) => ({\r\n           host: if contains(value: r.host, set: busyhost) then r.host else \"null\",\r\n           cpu_id: if contains(value: r.cpu_id, set: busycpu) then r.cpu_id else \"null\",\r\n           package_id: if contains(value: r.host, set: busyhost) and contains(value: r.cpu_id, set: busycpu) then r.package_id else \"null\",\r\n           core_id: if exists r.core_id then r.core_id else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n |> group()\r\n |> distinct(column: \"package_id\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\n\r\n  from(bucket: \"${buckets}\")\r\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\")\r\n |> group()\r\n |> filter(fn: (r) => contains(value: r.host, set: busyhost))\r\n |> filter(fn: (r) => contains(value: r.package_id, set: busyhostwithpckid)) \r\n |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n\r\n ",
          "refId": "D"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "hide": false,
          "query": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_dram_power_consumption_watts\")\r\n |> group()\r\n |> aggregateWindow(every: ${timeinterval}, fn: sum)",
          "refId": "C"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "hide": false,
          "query": "import \"strings\"\r\n\r\nt3 =\r\n    from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: mean)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 98.00 then r.host else \"null\",\r\n           cpu: if r._value > 98.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n\r\nt4 =\r\n     from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: min)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 95.00 then r.host else \"null\",\r\n           cpu: if r._value > 95.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n        \r\n\r\nidlehost = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"host\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlecpu = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"cpu\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlehostwithpckid = from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_core_cpu_frequency_mhz\")\r\n  |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n  |> map(\r\n        fn: (r) => ({\r\n           host: if contains(value: r.host, set: idlehost) then r.host else \"null\",\r\n           cpu_id: if contains(value: r.cpu_id, set: idlecpu) then r.cpu_id else \"null\",\r\n           package_id: if contains(value: r.host, set: idlehost) and contains(value: r.cpu_id, set: idlecpu) then r.package_id else \"null\",\r\n           core_id: if exists r.core_id then r.core_id else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )\r\n |> group()\r\n |> distinct(column: \"package_id\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\n\r\nfrom(bucket: \"${buckets}\")\r\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\") \r\n |> group()\r\n |> filter(fn: (r) => contains(value: r.host, set: idlehost))\r\n |> filter(fn: (r) => contains(value: r.package_id, set: idlehostwithpckid))\r\n |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n \r\n",
          "refId": "F"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "hide": false,
          "query": "import \"strings\"\r\n\r\nt1 =\r\n    from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])          \r\n          |> aggregateWindow(every: ${timeinterval}, fn: mean)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value <= 1 then r.host else \"null\",\r\n           cpu: if r._value <= 1 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n\r\nt2 =\r\n     from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])          \r\n          |> aggregateWindow(every: ${timeinterval}, fn: min)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value == 0.00 then r.host else \"null\",\r\n           cpu: if r._value == 0.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n        \r\n\r\nbusyhost = union(tables: [t1, t2])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"host\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nbusycpu = union(tables: [t1, t2])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"cpu\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\n busyhostwithpckid = from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_core_cpu_frequency_mhz\")\r\n  |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n   |> map(\r\n        fn: (r) => ({\r\n           host: if contains(value: r.host, set: busyhost) then r.host else \"null\",\r\n           cpu_id: if contains(value: r.cpu_id, set: busycpu) then r.cpu_id else \"null\",\r\n           package_id: if contains(value: r.host, set: busyhost) and contains(value: r.cpu_id, set: busycpu) then r.package_id else \"null\",\r\n           core_id: if exists r.core_id then r.core_id else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n |> group()\r\n |> distinct(column: \"package_id\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nbusypower = from(bucket: \"${buckets}\")\r\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\")\r\n |> group()\r\n |> filter(fn: (r) => contains(value: r.host, set: busyhost))\r\n |> filter(fn: (r) => contains(value: r.package_id, set: busyhostwithpckid))\r\n\r\n\r\nt3 =\r\n    from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: mean)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 98.00 then r.host else \"null\",\r\n           cpu: if r._value > 98.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n\r\nt4 =\r\n     from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: min)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 95.00 then r.host else \"null\",\r\n           cpu: if r._value > 95.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n        \r\n\r\nidlehost = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"host\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlecpu = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"cpu\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlehostwithpckid = from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_core_cpu_frequency_mhz\")\r\n  |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n  |> map(\r\n        fn: (r) => ({\r\n           host: if contains(value: r.host, set: idlehost) then r.host else \"null\",\r\n           cpu_id: if contains(value: r.cpu_id, set: idlecpu) then r.cpu_id else \"null\",\r\n           package_id: if contains(value: r.host, set: idlehost) and contains(value: r.cpu_id, set: idlecpu) then r.package_id else \"null\",\r\n           core_id: if exists r.core_id then r.core_id else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )\r\n |> group()\r\n |> distinct(column: \"package_id\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlepower = from(bucket: \"${buckets}\")\r\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\") \r\n |> group()\r\n |> filter(fn: (r) => contains(value: r.host, set: idlehost))\r\n |> filter(fn: (r) => contains(value: r.package_id, set: idlehostwithpckid))\r\n \r\n\r\n \r\nusedcpu = union(tables: [idlepower, busypower])\r\n|> map(fn: (r) => ({ hostcpu: strings.joinStr(arr: [r.host,r.package_id ], v: \", \"), _value:r._value }))\r\n|> group()\r\n|> distinct(column: \"hostcpu\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\n\r\nfrom(bucket: \"${buckets}\")\r\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\")\r\n |> group()\r\n |> map(fn: (r) => ({ hostcpu: strings.joinStr(arr: [r.host,r.package_id ], v: \", \"), _value:r._value ,\r\n _time: r._time, _start: r._start, _stop:r._stop }))\r\n |> filter(fn: (r) => not contains(value: r.hostcpu, set: usedcpu)) \r\n |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n",
          "refId": "E"
        }
      ],
      "title": "Cluster nodes CPU / DRAM ",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 5,
        "x": 19,
        "y": 6
      },
      "id": 6,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "hide": false,
          "query": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\")\r\n  |> group()\r\n  |> aggregateWindow(every: ${timeinterval}, fn: sum)",
          "refId": "A"
        }
      ],
      "title": "Cluster nodes CPU-only power consumption (now)",
      "type": "stat"
    },
    {
      "collapsed": false,
      "datasource": {
        "uid": "prometheus"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 14
      },
      "id": 12,
      "panels": [],
      "targets": [
        {
          "datasource": {
            "uid": "prometheus"
          },
          "refId": "A"
        }
      ],
      "title": "Cluster nodes CPU savings opportunity",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "unit",
                "value": "watt"
              },
              {
                "id": "displayName",
                "value": "CPU Power Usage"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "C"
            },
            "properties": [
              {
                "id": "unit",
                "value": "watt"
              },
              {
                "id": "displayName",
                "value": "Estimated Saving from idle core"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 19,
        "x": 0,
        "y": 15
      },
      "id": 2,
      "maxDataPoints": 1790,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "hide": false,
          "query": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\")\r\n |> group()\r\n |> aggregateWindow(every: ${timeinterval}, fn: sum)",
          "refId": "B"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "hide": false,
          "query": "import \"strings\"\r\n\r\nimport \"strings\"\r\n\r\nt3 =\r\n    from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: mean)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 98.00 then r.host else \"null\",\r\n           cpu: if r._value > 98.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n\r\nt4 =\r\n     from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: min)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 95.00 then r.host else \"null\",\r\n           cpu: if r._value > 95.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n        \r\n\r\nidlehost = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"host\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlecpu = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"cpu\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlehostwithpckid = from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_core_cpu_frequency_mhz\")\r\n  |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n  |> map(\r\n        fn: (r) => ({\r\n           host: if contains(value: r.host, set: idlehost) then r.host else \"null\",\r\n           cpu_id: if contains(value: r.cpu_id, set: idlecpu) then r.cpu_id else \"null\",\r\n           package_id: if contains(value: r.host, set: idlehost) and contains(value: r.cpu_id, set: idlecpu) then r.package_id else \"null\",\r\n           core_id: if exists r.core_id then r.core_id else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )\r\n |> group()\r\n |> distinct(column: \"package_id\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\n\r\nfrom(bucket: \"${buckets}\")\r\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\") \r\n |> group()\r\n |> filter(fn: (r) => contains(value: r.host, set: idlehost))\r\n |> filter(fn: (r) => contains(value: r.package_id, set: idlehostwithpckid))\r\n |> map(fn: (r) => ({host:r.host,package_id: r.package_id, _value: r._value * 0.25, _time: r._time, _start: r._start, _stop:r._stop }))\r\n |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n\r\n",
          "refId": "C"
        }
      ],
      "title": "Cluster nodes CPU power savings opportunity",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "description": "*Estimated savings from putting idle cores to C6*\n\nCore is considered idle when average busy cycles percentage is < 2% and peak < 5%\n\nPower can be saved when:\n- Core is in running state despite low load\n- Core is in C1 state but could be in C6",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 5,
        "x": 19,
        "y": 15
      },
      "id": 22,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "import \"strings\"\r\n\r\nimport \"strings\"\r\n\r\nt3 =\r\n    from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: mean)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 98.00 then r.host else \"null\",\r\n           cpu: if r._value > 98.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n\r\nt4 =\r\n     from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: min)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 95.00 then r.host else \"null\",\r\n           cpu: if r._value > 95.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n        \r\n\r\nidlehost = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"host\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlecpu = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"cpu\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlehostwithpckid = from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_core_cpu_frequency_mhz\")\r\n  |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n  |> map(\r\n        fn: (r) => ({\r\n           host: if contains(value: r.host, set: idlehost) then r.host else \"null\",\r\n           cpu_id: if contains(value: r.cpu_id, set: idlecpu) then r.cpu_id else \"null\",\r\n           package_id: if contains(value: r.host, set: idlehost) and contains(value: r.cpu_id, set: idlecpu) then r.package_id else \"null\",\r\n           core_id: if exists r.core_id then r.core_id else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )\r\n |> group()\r\n |> distinct(column: \"package_id\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\n\r\nfrom(bucket: \"${buckets}\")\r\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\") \r\n |> group()\r\n |> filter(fn: (r) => contains(value: r.host, set: idlehost))\r\n |> filter(fn: (r) => contains(value: r.package_id, set: idlehostwithpckid))\r\n |> map(fn: (r) => ({host:r.host,package_id: r.package_id, _value: r._value * 0.25, _time: r._time, _start: r._start, _stop:r._stop }))\r\n |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n\r\n",
          "refId": "A"
        }
      ],
      "title": "Estimated savings from putting idle cores to C6",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "description": "*Estimated energy savings from putting cores to C6 (last 24h)*",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "kwatth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 5,
        "x": 19,
        "y": 18
      },
      "hideTimeOverride": false,
      "id": 40,
      "interval": "",
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "import \"strings\"\r\n\r\nimport \"strings\"\r\n\r\nt3 =\r\n    from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: mean)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 98.00 then r.host else \"null\",\r\n           cpu: if r._value > 98.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n\r\nt4 =\r\n     from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: min)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 95.00 then r.host else \"null\",\r\n           cpu: if r._value > 95.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n        \r\n\r\nidlehost = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"host\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlecpu = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"cpu\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlehostwithpckid = from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_core_cpu_frequency_mhz\")\r\n  |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n  |> map(\r\n        fn: (r) => ({\r\n           host: if contains(value: r.host, set: idlehost) then r.host else \"null\",\r\n           cpu_id: if contains(value: r.cpu_id, set: idlecpu) then r.cpu_id else \"null\",\r\n           package_id: if contains(value: r.host, set: idlehost) and contains(value: r.cpu_id, set: idlecpu) then r.package_id else \"null\",\r\n           core_id: if exists r.core_id then r.core_id else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )\r\n |> group()\r\n |> distinct(column: \"package_id\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\n\r\nfrom(bucket: \"${buckets}\")\r\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\") \r\n |> group()\r\n |> filter(fn: (r) => contains(value: r.host, set: idlehost))\r\n |> filter(fn: (r) => contains(value: r.package_id, set: idlehostwithpckid))\r\n |> map(fn: (r) => ({host:r.host,package_id: r.package_id, _value: r._value * 0.25, _time: r._time, _start: r._start, _stop:r._stop }))\r\n |> aggregateWindow(every: 1h, fn: sum)\r\n |> group()\r\n |> map(fn: (r) => ({_value: (r._value / 1000.00) * 24.00 , _time: r._time, _start: r._start, _stop:r._stop }))\r\n\r\n",
          "refId": "A"
        }
      ],
      "title": "Estimated energy savings from putting cores to C6 (last 24h)",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "description": "*Estimated annual energy savings from putting cores to C6*",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "kwatth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 5,
        "x": 19,
        "y": 21
      },
      "hideTimeOverride": false,
      "id": 41,
      "interval": "",
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "import \"strings\"\r\n\r\nt3 =\r\n    from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: mean)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 98.00 then r.host else \"null\",\r\n           cpu: if r._value > 98.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n\r\nt4 =\r\n     from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: min)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 95.00 then r.host else \"null\",\r\n           cpu: if r._value > 95.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n        \r\n\r\nidlehost = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"host\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlecpu = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"cpu\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlehostwithpckid = from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_core_cpu_frequency_mhz\")\r\n  |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n  |> map(\r\n        fn: (r) => ({\r\n           host: if contains(value: r.host, set: idlehost) then r.host else \"null\",\r\n           cpu_id: if contains(value: r.cpu_id, set: idlecpu) then r.cpu_id else \"null\",\r\n           package_id: if contains(value: r.host, set: idlehost) and contains(value: r.cpu_id, set: idlecpu) then r.package_id else \"null\",\r\n           core_id: if exists r.core_id then r.core_id else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )\r\n |> group()\r\n |> distinct(column: \"package_id\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\n\r\nfrom(bucket: \"${buckets}\")\r\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\") \r\n |> group()\r\n |> filter(fn: (r) => contains(value: r.host, set: idlehost))\r\n |> filter(fn: (r) => contains(value: r.package_id, set: idlehostwithpckid))\r\n |> map(fn: (r) => ({host:r.host,package_id: r.package_id, _value: r._value * 0.25, _time: r._time, _start: r._start, _stop:r._stop }))\r\n |> aggregateWindow(every: 1h, fn: sum)\r\n |> group()\r\n |> map(fn: (r) => ({_value: (r._value / 1000.00) * 24.00 * 365.00 , _time: r._time, _start: r._start, _stop:r._stop }))\r\n  \r\n\r\n",
          "refId": "A"
        }
      ],
      "title": "Estimated annual energy savings from putting cores to C6",
      "type": "stat"
    },
    {
      "collapsed": false,
      "datasource": {
        "uid": "prometheus"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 24
      },
      "id": 39,
      "panels": [],
      "targets": [
        {
          "datasource": {
            "uid": "prometheus"
          },
          "refId": "A"
        }
      ],
      "title": "Environmental and financial cost of CPUs energy",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "kwatth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 0,
        "y": 25
      },
      "id": 26,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\")\r\n  |> group()\r\n  |> aggregateWindow(every: 1h, fn: sum)\r\n  |> map(fn: (r) => ({_value: (r._value / 1000.00) * 24.00 , _time: r._time, _start: r._start, _stop:r._stop }))",
          "refId": "A"
        }
      ],
      "title": "kWh consumed in the last 24 hours",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "currencyUSD"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 5,
        "x": 4,
        "y": 25
      },
      "id": 29,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\")\r\n  |> group()\r\n  |> aggregateWindow(every: 1h, fn: sum)\r\n  |> map(fn: (r) => ({_value: ((r._value / 1000.00) * 24.00) * ${kWh_price} , _time: r._time, _start: r._start, _stop:r._stop }))",
          "refId": "A"
        }
      ],
      "title": "Energy cost of the last 24 hours",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "description": "Pounds/kWh factor from UK government statistical-data-sets, \"Annual domestic energy price statistics\" for 2020",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "currencyUSD"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 5,
        "x": 9,
        "y": 25
      },
      "id": 34,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "import \"strings\"\r\n\r\nt3 =\r\n    from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: mean)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 98.00 then r.host else \"null\",\r\n           cpu: if r._value > 98.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n\r\nt4 =\r\n     from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: min)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 95.00 then r.host else \"null\",\r\n           cpu: if r._value > 95.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n        \r\n\r\nidlehost = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"host\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlecpu = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"cpu\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlehostwithpckid = from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_core_cpu_frequency_mhz\")\r\n  |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n  |> map(\r\n        fn: (r) => ({\r\n           host: if contains(value: r.host, set: idlehost) then r.host else \"null\",\r\n           cpu_id: if contains(value: r.cpu_id, set: idlecpu) then r.cpu_id else \"null\",\r\n           package_id: if contains(value: r.host, set: idlehost) and contains(value: r.cpu_id, set: idlecpu) then r.package_id else \"null\",\r\n           core_id: if exists r.core_id then r.core_id else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )\r\n |> group()\r\n |> distinct(column: \"package_id\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\n\r\nfrom(bucket: \"${buckets}\")\r\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\") \r\n |> group()\r\n |> filter(fn: (r) => contains(value: r.host, set: idlehost))\r\n |> filter(fn: (r) => contains(value: r.package_id, set: idlehostwithpckid))\r\n |> map(fn: (r) => ({host:r.host,package_id: r.package_id, _value: r._value * 0.25, _time: r._time, _start: r._start, _stop:r._stop }))\r\n |> aggregateWindow(every: 1h, fn: sum)\r\n |> group()\r\n |> map(fn: (r) => ({_value: ((r._value / 1000.00) * 24.00) * ${kWh_price} , _time: r._time, _start: r._start, _stop:r._stop }))\r\n\r\n",
          "refId": "A"
        }
      ],
      "title": "Estimated cost savings from putting cores to C6 (last 24h)",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-red",
                "value": null
              }
            ]
          },
          "unit": "masskg"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 5,
        "x": 14,
        "y": 25
      },
      "id": 30,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\")\r\n  |> group()\r\n  |> aggregateWindow(every: 1h, fn: sum)\r\n  |> map(fn: (r) => ({_value: ((r._value / 1000.00) * 24.00) * ${co2factor} , _time: r._time, _start: r._start, _stop:r._stop }))",
          "refId": "A"
        }
      ],
      "title": "Estimated CO2 emissions (24h)",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "description": "*Estimated CO2 emissions savings from putting cores to C6 (last 24h)*\n\nCO2/kWh factor from UK government webpage, \"Greenhouse gas reporting: conversion factors 2021\"",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "masskg"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 5,
        "x": 19,
        "y": 25
      },
      "id": 32,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "import \"strings\"\r\n\r\nt3 =\r\n    from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: mean)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 98.00 then r.host else \"null\",\r\n           cpu: if r._value > 98.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n\r\nt4 =\r\n     from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: min)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 95.00 then r.host else \"null\",\r\n           cpu: if r._value > 95.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n        \r\n\r\nidlehost = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"host\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlecpu = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"cpu\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlehostwithpckid = from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_core_cpu_frequency_mhz\")\r\n  |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n  |> map(\r\n        fn: (r) => ({\r\n           host: if contains(value: r.host, set: idlehost) then r.host else \"null\",\r\n           cpu_id: if contains(value: r.cpu_id, set: idlecpu) then r.cpu_id else \"null\",\r\n           package_id: if contains(value: r.host, set: idlehost) and contains(value: r.cpu_id, set: idlecpu) then r.package_id else \"null\",\r\n           core_id: if exists r.core_id then r.core_id else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )\r\n |> group()\r\n |> distinct(column: \"package_id\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\n\r\nfrom(bucket: \"${buckets}\")\r\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\") \r\n |> group()\r\n |> filter(fn: (r) => contains(value: r.host, set: idlehost))\r\n |> filter(fn: (r) => contains(value: r.package_id, set: idlehostwithpckid))\r\n |> map(fn: (r) => ({host:r.host,package_id: r.package_id, _value: r._value * 0.25, _time: r._time, _start: r._start, _stop:r._stop }))\r\n |> aggregateWindow(every: 1h, fn: sum)\r\n |> group()\r\n |> map(fn: (r) => ({_value: ((r._value / 1000.00) * 24.00) * ${co2factor} , _time: r._time, _start: r._start, _stop:r._stop }))\r\n\r\n",
          "refId": "A"
        }
      ],
      "title": "Estimated CO2 emissions savings from putting cores to C6 (last 24h)",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "kwatth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 0,
        "y": 29
      },
      "id": 27,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\")\r\n  |> group()\r\n  |> aggregateWindow(every: 1h, fn: sum)\r\n  |> map(fn: (r) => ({_value: ((r._value / 1000.00) * 24.00) * 365.00 , _time: r._time, _start: r._start, _stop:r._stop }))",
          "refId": "A"
        }
      ],
      "title": "Estimated annual energy consumption",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "currencyUSD"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 5,
        "x": 4,
        "y": 29
      },
      "id": 28,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\")\r\n  |> group()\r\n  |> aggregateWindow(every: 1h, fn: sum)\r\n  |> map(fn: (r) => ({_value: (((r._value / 1000.00) * 24.00) * 365.00) * ${kWh_price} , _time: r._time, _start: r._start, _stop:r._stop }))",
          "refId": "A"
        }
      ],
      "title": "Estimated annual energy cost",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "description": "Pounds/kWh factor from UK government statistical-data-sets, \"Annual domestic energy price statistics\" for 2020",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "currencyUSD"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 5,
        "x": 9,
        "y": 29
      },
      "id": 35,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "import \"strings\"\r\n\r\nt3 =\r\n    from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: mean)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 98.00 then r.host else \"null\",\r\n           cpu: if r._value > 98.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n\r\nt4 =\r\n     from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: min)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 95.00 then r.host else \"null\",\r\n           cpu: if r._value > 95.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n        \r\n\r\nidlehost = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"host\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlecpu = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"cpu\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlehostwithpckid = from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_core_cpu_frequency_mhz\")\r\n  |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n  |> map(\r\n        fn: (r) => ({\r\n           host: if contains(value: r.host, set: idlehost) then r.host else \"null\",\r\n           cpu_id: if contains(value: r.cpu_id, set: idlecpu) then r.cpu_id else \"null\",\r\n           package_id: if contains(value: r.host, set: idlehost) and contains(value: r.cpu_id, set: idlecpu) then r.package_id else \"null\",\r\n           core_id: if exists r.core_id then r.core_id else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )\r\n |> group()\r\n |> distinct(column: \"package_id\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\n\r\nfrom(bucket: \"${buckets}\")\r\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\") \r\n |> group()\r\n |> filter(fn: (r) => contains(value: r.host, set: idlehost))\r\n |> filter(fn: (r) => contains(value: r.package_id, set: idlehostwithpckid))\r\n |> map(fn: (r) => ({host:r.host,package_id: r.package_id, _value: r._value * 0.25, _time: r._time, _start: r._start, _stop:r._stop }))\r\n |> aggregateWindow(every: 1h, fn: sum)\r\n |> group()\r\n |> map(fn: (r) => ({_value: ((r._value / 1000.00) * 24.00 * 365.00) * ${kWh_price} , _time: r._time, _start: r._start, _stop:r._stop }))\r\n\r\n",
          "refId": "A"
        }
      ],
      "title": "Estimated annual cost savings from putting cores to C6",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-red",
                "value": null
              }
            ]
          },
          "unit": "masskg"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 5,
        "x": 14,
        "y": 29
      },
      "id": 31,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\")\r\n  |> group()\r\n  |> aggregateWindow(every: 1h, fn: sum)\r\n  |> map(fn: (r) => ({_value: (((r._value / 1000.00) * 24.00) * 365.00) * ${co2factor} , _time: r._time, _start: r._start, _stop:r._stop }))",
          "refId": "A"
        }
      ],
      "title": "Estimated annual CO2 emissions",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "description": "*Estimated annual CO2 emissions savings from putting cores to C6*\n\nCO2/kWh factor from UK government webpage, \"Greenhouse gas reporting: conversion factors 2021\"",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "masskg"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 5,
        "x": 19,
        "y": 29
      },
      "id": 33,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "import \"strings\"\r\n\r\nt3 =\r\n    from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: mean)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 98.00 then r.host else \"null\",\r\n           cpu: if r._value > 98.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n\r\nt4 =\r\n     from(bucket:\"${buckets}\")\r\n          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\" and r.cpu != \"cpu-total\")\r\n          |> group(columns: [\"host\",\"cpu\"])\r\n          |> aggregateWindow(every: ${timeinterval}, fn: min)\r\n          |> map(\r\n        fn: (r) => ({\r\n           host: if r._value > 95.00 then r.host else \"null\",\r\n           cpu: if r._value > 95.00 then r.cpu else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )  \r\n    |> group(columns: [\"host\",\"cpu\"])\r\n        \r\n\r\nidlehost = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"host\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlecpu = union(tables: [t3, t4])\r\n |> map(fn: (r) => ({r with cpu: strings.replace(v: r.cpu, t: \"cpu\", u: \"\", i: 1)}))\r\n |> group()\r\n |> distinct(column: \"cpu\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\nidlehostwithpckid = from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_core_cpu_frequency_mhz\")\r\n  |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n  |> map(\r\n        fn: (r) => ({\r\n           host: if contains(value: r.host, set: idlehost) then r.host else \"null\",\r\n           cpu_id: if contains(value: r.cpu_id, set: idlecpu) then r.cpu_id else \"null\",\r\n           package_id: if contains(value: r.host, set: idlehost) and contains(value: r.cpu_id, set: idlecpu) then r.package_id else \"null\",\r\n           core_id: if exists r.core_id then r.core_id else \"null\",\r\n           _value: if exists r._value then r._value else 0.00,\r\n           _time: if exists r._time then r._time else now(),\r\n           _start: if exists r._start then r._start else now(),\r\n           _stop: if exists r._stop then r._stop else now(),\r\n           }),\r\n    )\r\n |> group()\r\n |> distinct(column: \"package_id\")\r\n |> tableFind(fn: (key) => true)\r\n |> getColumn(column: \"_value\")\r\n\r\n\r\nfrom(bucket: \"${buckets}\")\r\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_power_consumption_watts\") \r\n |> group()\r\n |> filter(fn: (r) => contains(value: r.host, set: idlehost))\r\n |> filter(fn: (r) => contains(value: r.package_id, set: idlehostwithpckid))\r\n |> map(fn: (r) => ({host:r.host,package_id: r.package_id, _value: r._value * 0.25, _time: r._time, _start: r._start, _stop:r._stop }))\r\n |> aggregateWindow(every: 1h, fn: sum)\r\n |> group()\r\n |> map(fn: (r) => ({_value: ((r._value / 1000.00) * 24.00 * 365.00) * ${co2factor} , _time: r._time, _start: r._start, _stop:r._stop }))\r\n\r\n",
          "refId": "A"
        }
      ],
      "title": "Estimated annual CO2 emissions savings from putting cores to C6",
      "type": "stat"
    },
    {
      "collapsed": false,
      "datasource": {
        "uid": "prometheus"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 33
      },
      "id": 61,
      "panels": [],
      "targets": [
        {
          "datasource": {
            "uid": "prometheus"
          },
          "refId": "A"
        }
      ],
      "title": "Cluster nodes memory savings opportunity",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-yellow",
                "value": null
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Used memory %"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 34
      },
      "id": 63,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mem_used\" or r[\"_measurement\"] == \"mem_total\")\r\n  |> sort(columns: [\"_time\"])\r\n  |>toFloat()\r\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_measurement\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({host:r.host, _value:(r.mem_used / r.mem_total) * 100.00, _time: r._time, _start: r._start, _stop:r._stop }))\r\n  |>group()\r\n  |> aggregateWindow(every: ${timeinterval}, fn: max)\r\n",
          "refId": "A"
        }
      ],
      "title": "Used memory %",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-blue",
                "value": null
              }
            ]
          },
          "unit": "decbytes"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 6,
        "x": 12,
        "y": 34
      },
      "id": 69,
      "options": {
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "text": {}
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "hide": false,
          "query": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mem_available\")\r\n  |> group()\r\n  |> aggregateWindow(every: 1h, fn: sum)",
          "refId": "A"
        }
      ],
      "title": "Memory not used",
      "transformations": [
        {
          "id": "configFromData",
          "options": {
            "applyTo": {
              "id": "byName",
              "options": "Memory never used"
            },
            "configRefId": "B",
            "mappings": [
              {
                "fieldName": "memory total",
                "handlerKey": "max"
              }
            ]
          }
        },
        {
          "id": "reduce",
          "options": {
            "includeTimeField": false,
            "mode": "reduceFields",
            "reducers": [
              "min"
            ]
          }
        }
      ],
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-red",
                "value": null
              }
            ]
          },
          "unit": "kwatth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 6,
        "x": 18,
        "y": 34
      },
      "id": 71,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_dram_power_consumption_watts\" or r[\"_measurement\"] == \"mem_available_percent\")\r\n  |>drop(columns: [\"package_id\"])\r\n  |> sort(columns: [\"_time\"])\r\n|> pivot(rowKey: [\"_time\"], columnKey: [\"_measurement\"], valueColumn: \"_value\")\r\n|>group()\r\n|> map(fn: (r) => ({host:r.host, _value:(r.powerstat_package_current_dram_power_consumption_watts * (r.mem_available_percent / 100.00)) * ${kWh_price} , _time: r._time, _start: r._start, _stop:r._stop }))\r\n|> aggregateWindow(every: 1h, fn: sum)\r\n|> map(fn: (r) => ({host:r.host, _value:(r._value / 1000.00), _time: r._time, _start: r._start, _stop:r._stop }))",
          "refId": "A"
        }
      ],
      "title": "Energy consumed by redundant memory",
      "transformations": [],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "bytes",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 0,
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-yellow",
                "value": null
              }
            ]
          },
          "unit": "decbytes"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Value"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#F2CC0C",
                  "mode": "fixed"
                }
              },
              {
                "id": "displayName",
                "value": "Memory Used"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 40
      },
      "id": 65,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "hide": false,
          "query": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mem_used\")\r\n  |> group()\r\n  |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n",
          "refId": "A"
        }
      ],
      "title": "Used memory total",
      "transformations": [
        {
          "id": "configFromData",
          "options": {
            "applyTo": {
              "id": "byName",
              "options": "Used Memory"
            },
            "configRefId": "B",
            "mappings": [
              {
                "fieldName": "Total memory",
                "handlerKey": "max"
              }
            ]
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-green",
                "value": null
              }
            ]
          },
          "unit": "currencyUSD"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 6,
        "x": 12,
        "y": 40
      },
      "id": 73,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_dram_power_consumption_watts\" or r[\"_measurement\"] == \"mem_available_percent\")\r\n  |>drop(columns: [\"package_id\"])\r\n  |> sort(columns: [\"_time\"])\r\n|> pivot(rowKey: [\"_time\"], columnKey: [\"_measurement\"], valueColumn: \"_value\")\r\n|>group()\r\n|> map(fn: (r) => ({host:r.host, _value:(r.powerstat_package_current_dram_power_consumption_watts * (r.mem_available_percent / 100.00)) * ${kWh_price} , _time: r._time, _start: r._start, _stop:r._stop }))\r\n|> aggregateWindow(every: 1h, fn: sum)\r\n|> map(fn: (r) => ({host:r.host, _value:(r._value / 1000.00) * ${kWh_price}, _time: r._time, _start: r._start, _stop:r._stop }))",
          "refId": "A"
        }
      ],
      "title": "Money spent on excess electricity",
      "transformations": [],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-green",
                "value": null
              }
            ]
          },
          "unit": "masskg"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 6,
        "x": 18,
        "y": 40
      },
      "id": 75,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_dram_power_consumption_watts\" or r[\"_measurement\"] == \"mem_available_percent\")\r\n  |>drop(columns: [\"package_id\"])\r\n  |> sort(columns: [\"_time\"])\r\n|> pivot(rowKey: [\"_time\"], columnKey: [\"_measurement\"], valueColumn: \"_value\")\r\n|>group()\r\n|> map(fn: (r) => ({host:r.host, _value:(r.powerstat_package_current_dram_power_consumption_watts * (r.mem_available_percent / 100.00)) * ${kWh_price} , _time: r._time, _start: r._start, _stop:r._stop }))\r\n|> aggregateWindow(every: 1h, fn: sum)\r\n|> map(fn: (r) => ({host:r.host, _value:(r._value / 1000.00) * ${co2factor}, _time: r._time, _start: r._start, _stop:r._stop }))",
          "refId": "A"
        }
      ],
      "title": "CO2 emitted by excess electricity",
      "transformations": [],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P8EFB3B3375746E67"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-yellow",
                "value": null
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Watts Used By Memory"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 46
      },
      "id": 67,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P8EFB3B3375746E67"
          },
          "query": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerstat_package_current_dram_power_consumption_watts\")\r\n  |>group()\r\n  |> aggregateWindow(every: ${timeinterval}, fn: sum)\r\n",
          "refId": "A"
        }
      ],
      "title": "Watts used on memory",
      "type": "timeseries"
    }
  ],
  "refresh": "",
  "schemaVersion": 37,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": true,
          "text": "0.174",
          "value": "0.174"
        },
        "description": "Pounds/kWh factor from UK government statistical-data-sets, \"Annual domestic energy price statistics\" for 2020",
        "hide": 0,
        "label": "USD/kWh",
        "name": "kWh_price",
        "options": [
          {
            "selected": true,
            "text": "0.174",
            "value": "0.174"
          }
        ],
        "query": "0.174",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "current": {
          "selected": true,
          "text": "0.21016",
          "value": "0.21016"
        },
        "description": "CO2/kWh factor from UK government webpage, \"Greenhouse gas reporting: conversion factors 2021\"",
        "hide": 0,
        "label": " CO2/kWh Factor",
        "name": "co2factor",
        "options": [
          {
            "selected": true,
            "text": "0.21016",
            "value": "0.21016"
          }
        ],
        "query": "0.21016",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "P8EFB3B3375746E67"
        },
        "definition": "buckets()",
        "hide": 2,
        "includeAll": false,
        "label": "Buckets",
        "multi": false,
        "name": "buckets",
        "options": [],
        "query": "buckets()",
        "refresh": 1,
        "regex": "^(?!.*_).*$",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "P8EFB3B3375746E67"
        },
        "definition": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\")\r\n  |> sort(columns: [\"_time\"])\r\n  |> group()\r\n  |> elapsed(unit: 1s)\r\n  |>sum(column:\"elapsed\")\r\n  |> map(\r\n        fn: (r) => ({\r\n            elapse: r.elapsed,\r\n            duration: \r\n            if r.elapsed < 600.00 then \"30s\" \r\n            else if r.elapsed > 600.00 and r.elapsed < 3600.00 then \"1m\"\r\n            else if r.elapsed > 3600.00 and r.elapsed < 86400.00 then \"1h\"\r\n            else if r.elapsed > 86400.00 and r.elapsed < 259200.00 then \"3h\"\r\n            else if r.elapsed > 259200.00 and r.elapsed < 432000.00 then \"6h\"\r\n            else \"1d\",\r\n           }),\r\n    )\r\n  |>drop(columns:[\"elapse\"])",
        "hide": 0,
        "includeAll": false,
        "label": "Resolution",
        "multi": false,
        "name": "timeinterval",
        "options": [],
        "query": "from(bucket: \"${buckets}\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"cpu_usage_idle\")\r\n  |> sort(columns: [\"_time\"])\r\n  |> group()\r\n  |> elapsed(unit: 1s)\r\n  |>sum(column:\"elapsed\")\r\n  |> map(\r\n        fn: (r) => ({\r\n            elapse: r.elapsed,\r\n            duration: \r\n            if r.elapsed < 600.00 then \"30s\" \r\n            else if r.elapsed > 600.00 and r.elapsed < 3600.00 then \"1m\"\r\n            else if r.elapsed > 3600.00 and r.elapsed < 86400.00 then \"1h\"\r\n            else if r.elapsed > 86400.00 and r.elapsed < 259200.00 then \"3h\"\r\n            else if r.elapsed > 259200.00 and r.elapsed < 432000.00 then \"6h\"\r\n            else \"1d\",\r\n           }),\r\n    )\r\n  |>drop(columns:[\"elapse\"])",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-2d",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "Intel Cluster Power Consumption Overview - Running",
  "uid": "IUcnbf-Vk",
  "version": 6,
  "weekStart": ""
}
